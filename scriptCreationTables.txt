-- Création de la table des utilisateurs
CREATE TABLE users (
    username VARCHAR(50) NOT NULL PRIMARY KEY,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('STANDARD', 'ADMIN') DEFAULT 'STANDARD'
);

-- Création de la table des playlists
CREATE TABLE playlists (
    playlist_id INT AUTO_INCREMENT PRIMARY KEY,
    titre VARCHAR(100) NOT NULL,
    username VARCHAR(50) NOT NULL,
    date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user FOREIGN KEY (username) REFERENCES users(username) ON DELETE CASCADE
);

-- Création de la table des pistes
CREATE TABLE tracks (
    titre VARCHAR(100) NOT NULL,
    artiste VARCHAR(100) NOT NULL,
    date_ajout TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (titre,artiste)
);

-- Création de la table stock pour lier les pistes aux playlists
CREATE TABLE stock (
    playlist_id INT NOT NULL,
    track_titre VARCHAR(100) NOT NULL,
    track_artiste VARCHAR(100) NOT NULL,
    PRIMARY KEY (playlist_id, track_titre, track_artiste),
    CONSTRAINT fk_playlist FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id) ON DELETE CASCADE,
    CONSTRAINT fk_track FOREIGN KEY (track_titre, track_artiste) REFERENCES tracks(titre, artiste) ON DELETE CASCADE
);

-- Ajout d'utilisateurs pour les tests
INSERT INTO users (username, email, password, role) VALUES ('alexandre', 'alexandre@gmail.com', 'alexandre', 'STANDARD');
INSERT INTO users (username, email, password, role) VALUES ('elias', 'elias@gmail.com', 'elias', 'STANDARD');
INSERT INTO users (username, email, password, role) VALUES ('admin', 'a@gmail.com', 'a', 'ADMIN');

-- Ajout d'une playlist pour les tests
INSERT INTO playlists (titre, username) VALUES ('Playlist1', 'alexandre');

-- Ajout d'une piste pour les tests
INSERT INTO tracks (titre, artiste) VALUES ('Titre', 'Artiste');

-- Ajout d'une relation dans la table stock pour tester l'appartenance
INSERT INTO stock (playlist_id, track_titre, track_artiste) VALUES (1, 'Titre', 'Artiste');
